import numpy as np

"---------------------------------------------Problem-------------------------------------------------------------------"

'两个同心圆柱形成的圆环，外圆柱半径为 0.1m，内圆柱体半径为0.01m' \
'圆环内有两种互不相融的不可压缩流体，两种流体的分界面为0.05m，流体密度分别为1000kg m和800kg m ，' \
'动力黏度分别为0.1Pas和0.01Pas。初始时刻，环内流体静止不动，t0时刻，两个同心圆柱分别以等角速度1rads和-1rads' \
'绕圆心柱o旋转。假设圆环内流体运动为层流流动。'

"------------------------------------------Initialization--------------------------------------------------------------"
r1 = 0.1   # 外径
r2 = 0.01  # 内径
r3 = 0.05  # 流体界面

n_in = 40  # 内流体划分
n_out = 50  # 外流体划分
omega1 = 1   # 外筒转动方向
omega2 = -1   # 内筒转动方向
detar_in = (r3-r2)/n_in  # 内流体的步长
detar_out = (r1-r3)/n_out  # 外流体的步长


rho1 = 1000.0  # 外流体密度
rho2 = 800.0  # 内流体密度
rho3 = (2 * (detar_in + detar_out) * rho1 * rho2)/(detar_in * rho1 + detar_out * rho2)  # 两流体交界容积的密度

mu1 = 10  # 外流体动力粘度
mu2 = 1  # 外流体动力粘度
mu3 = (2 * (detar_in + detar_out) * mu1 * mu2)/(detar_in * mu1 + detar_out * mu2)  # 两流体交界容积的粘度

A = np.zeros((n_in+n_out,n_in+n_out))  # n+1时层次的各项系数
u_old = np.zeros((n_in+n_out,1))  # n时层次的速度u
u_new = np.zeros((n_in+n_out,1))  # n+1时层次的速度u
r = np.zeros((n_in+n_out, 1))  # 创建数组保存每个节点的位置信息（r值）

"------------------------------------------Iterative_Solution----------------------------------------------------------"
'循环计算每个节点对应的位置信息（r值）'
for i in range(n_in+n_out):
    r[i] = (i+1/2)*detar_in + r2

'时间层走600次，每次0.1时长'
for t in range(600):
    detat = 0.1  # 设置时间层迭代的时间长度
    '高斯塞得尔迭代层，直接设置循环次数，经测试已经收敛'
    for j in range(200):
        '每个节点的计算层'
        for i in range (n_in+n_out): # python以0开始计算点，点的编号是0-89

            '内壁面边界条件设置主要参数有r2，omega2，rho2，mu2'
            if i == 0:
                'n+1时层速度u1的系数'
                A[i, i] = rho2 * detar_in / mu2 / detat + 2 / detar_in - 1 / (r[i + 1] + r[i]) + 1 / (r[i] + r2)
                'n+1时层速度u2的系数'
                A[i + 1, i] = 1 / detar_in + 1 / (r[i + 1] + r[i])
                'n+1时层内壁面边界处u的系数'
                boundary_in = 1 / detar_in - 1 / (r[i] + r2)
                'n时层内速度u1的系数'
                old = rho2 * detar_in / mu2 / detat
                'n+1时层速度u1的计算式'
                u_new[i] = (u_old[i, 0] * old + A[i + 1, i] * u_new[i + 1, 0] + boundary_in * omega2 * r2) / A[i, i]

            '内部流体节点速度的计算0-39'
            if i!= 0 and i < 40:
                'n+1时层速度ui的系数'
                A[i,i]=rho2 * detar_in/ mu2/detat + 2/detar_in - 1/(r[i+1]+r[i]) + 1/(r[i]+r[i-1])
                'n+1时层速度ui+1的系数'
                A[i+1, i] = 1/detar_in + 1/(r[i+1]+r[i])
                'n+1时层速度ui-1的系数'
                A[i-1, i] = 1/detar_in - 1/(r[i]+r[i-1])
                'n时层内速度u1的系数'
                old = rho2 * detar_in/ mu2/detat
                'n+1时层速度ui的计算式'
                u_new[i,0] =(u_old[i,0]*old + A[i+1, i]*u_new[i+1,0] + A[i-1, i]*u_new[i-1,0])/A[i,i]

            '内外流体边界处节点速度的计算'
            if i == 40:
                'n+1时层速度u40的系数'
                A[i, i] = rho3 * detar_in / mu3 / detat + 2 / detar_in - 1 / (r[i + 1] + r[i]) + 1 / (r[i] + r[i - 1])
                'n+1时层速度u41的系数'
                A[i + 1, i] = 1 / detar_in + 1 / (r[i + 1] + r[i])
                'n+1时层速度u39的系数'
                A[i - 1, i] = 1 / detar_in - 1 / (r[i] + r[i - 1])
                'n时层内速度u40的系数'
                old = rho3 * detar_in / mu3 / detat
                'n+1时层速度u40的计算式'
                u_new[i, 0] = (u_old[i, 0] * old + A[i + 1, i] * u_new[i + 1, 0] + A[i - 1, i] * u_new[i - 1, 0]) / A[i, i]

            '外部流体节点速度的计算41-88'
            if i > 40 and i!=89:
                'n+1时层速度ui的系数'
                A[i,i]=rho1 * detar_in / mu1 / detat + 2 / detar_in - 1/(r[i+1]+r[i]) + 1/(r[i]+r[i-1])
                'n+1时层速度ui+1的系数'
                A[i+1, i] = 1/detar_in + 1/(r[i+1]+r[i])
                'n+1时层速度ui-1的系数'
                A[i-1, i] = 1/detar_in - 1/(r[i]+r[i-1])
                'n时层内速度u1的系内壁面边界处u的系数数'
                old = rho1 * detar_in / mu1/detat
                'n+1时层速度ui的计算式'
                u_new[i,0] =(u_old[i , 0]*old + A[i+1, i]*u_new[i+1,0] + A[i-1, i]*u_new[i-1,0])/A[i,i]

            '外壁面边界条件设置主要参数有r1，omega1，rho1，mu1'
            if i == 89:
                'n+1时层速度u89的系数'
                A[i, i] = rho1 * detar_in / mu1 / detat +2 /detar_in +1 / (r1 + r[i]) + 1 / (r[i] + r[i - 1])
                'n+1时层内壁面边界处u的系数'
                boundary_out = 1/detar_in + 1 / (r1 + r[i])
                'n+1时层速度u88的系数'
                A[i - 1, i] = 1/detar_in - 1 / (r[i] + r[i - 1])
                'n时层内速度u89的系数'
                b = rho1 * detar_in / mu1 / detat
                'n+1时层速度u89的计算式'
                u_new[i] = (u_old[i ,0] * b + boundary_out * omega1 * r1 + A[i - 1, i] * u_new[i - 1, 0]) / A[i, i]

    '时层每走一层将速度保存用于下一时层的计算'
    u_old= u_new

"-------------------------------------------------result---------------------------------------------------------------"

'输出数据 格式：  节点位置  对应的速度'
for i in range(n_in+n_out):
    print('%f     %.15f' % (r[i] ,u_new[i]))

'''
节点位置       对应速度
0.010500     -0.007156
0.011500     -0.004613
0.012500     -0.002317
0.013500     -0.000212
0.014500     0.001740
0.015500     0.003571
0.016500     0.005301
0.017500     0.006948
0.018500     0.008526
0.019500     0.010045
0.020500     0.011513
0.021500     0.012938
0.022500     0.014326
0.023500     0.015681
0.024500     0.017008
0.025500     0.018309
0.026500     0.019587
0.027500     0.020846
0.028500     0.022087
0.029500     0.023312
0.030500     0.024522
0.031500     0.025719
0.032500     0.026904
0.033500     0.028078
0.034500     0.029243
0.035500     0.030398
0.036500     0.031545
0.037500     0.032685
0.038500     0.033817
0.039500     0.034943
0.040500     0.036063
0.041500     0.037177
0.042500     0.038286
0.043500     0.039391
0.044500     0.040490
0.045500     0.041586
0.046500     0.042677
0.047500     0.043765
0.048500     0.044849
0.049500     0.045931
0.050500     0.047009
0.051500     0.048084
0.052500     0.049156
0.053500     0.050226
0.054500     0.051294
0.055500     0.052359
0.056500     0.053422
0.057500     0.054483
0.058500     0.055541
0.059500     0.056599
0.060500     0.057654
0.061500     0.058708
0.062500     0.059760
0.063500     0.060810
0.064500     0.061859
0.065500     0.062907
0.066500     0.063953
0.067500     0.064998
0.068500     0.066042
0.069500     0.067085
0.070500     0.068127
0.071500     0.069167
0.072500     0.070207
0.073500     0.071245
0.074500     0.072283
0.075500     0.073320
0.076500     0.074356
0.077500     0.075391
0.078500     0.076425
0.079500     0.077458
0.080500     0.078491
0.081500     0.079523
0.082500     0.080555
0.083500     0.081585
0.084500     0.082615
0.085500     0.083645
0.086500     0.084674
0.087500     0.085702
0.088500     0.086730
0.089500     0.087757
0.090500     0.088783
0.091500     0.089810
0.092500     0.090835
0.093500     0.091860
0.094500     0.092885
0.095500     0.093909
0.096500     0.094933
0.097500     0.095957
0.098500     0.096980
0.099500     0.098003
'''